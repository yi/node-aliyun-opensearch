// Generated by CoffeeScript 1.7.1

/*
 * 加密工具类
 * User YuanXiangDong
 * Date 14-10-14
 */

(function() {
  var crypto, dateYearRegexp, debug, urlEncode;

  crypto = require('crypto');

  debug = require('debug')('gama-search::utils::crypto_util');

  urlEncode = require('./url_encode');

  dateYearRegexp = /(y+)/;

  Date.prototype.Format = function(fmt) {
    var k, o, val;
    o = {
      "M+": this.getMonth() + 1,
      "d+": this.getDate(),
      "h+": this.getHours(),
      "m+": this.getMinutes(),
      "s+": this.getSeconds(),
      "q+": Math.floor((this.getMonth() + 3) / 3),
      "S": this.getMilliseconds()
    };
    if (/(y+)/.test(fmt)) {
      fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    }
    for (k in o) {
      val = o[k];
      if (new RegExp("(" + k + ")").test(fmt)) {
        fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
      }
    }
    return fmt;
  };

  exports.md5 = function(str) {
    var md5sum, _ref;
    md5sum = crypto.createHash('md5');
    md5sum.update(str, (_ref = Buffer.isBuffer(str)) != null ? _ref : {
      'binary': 'utf8'
    });
    return md5sum.digest('hex');
  };

  exports.hmac = function(str, key) {
    var hmacsum;
    hmacsum = crypto.createHmac('sha1', key);
    hmacsum.update(str);
    return hmacsum.digest().toString('base64');
  };

  exports.makeNonce = function() {
    var random, time;
    time = parseInt(new Date().getTime());
    random = Math.floor(Math.random() * (9999 - 1000 + 1) + 1000);
    return "" + time + random;
  };

  exports.makeSign = function(params, httpMethod, accessKeySecret) {
    var i, key, keys, q, sign, _i, _p, _ref;
    q = '';
    if (params != null) {
      if (params.sign_mode === "1" && (params.items != null)) {
        delete params.items;
      }
      keys = Object.keys(params);
      keys.sort();
      _p = {};
      for (i = _i = 0, _ref = keys.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        key = keys[i];
        _p[key] = params[key];
      }
    }
    q = "" + httpMethod + "&" + (urlEncode.encode('/')) + "&" + (urlEncode.encode(urlEncode.query2string(_p)));
    sign = exports.hmac("" + q, "" + accessKeySecret + "&");
    return sign;
  };

}).call(this);
